import $ from 'jquery';
import * as Entities from '../entities'
import { TOSCA_Node_Template, TOSCA_Relationship_Template, TOSCA_Requirement_Assignment, TOSCA_Service_Template, TOSCA_Topology_Template } from '@/totypa/tosca-types/template-types';
import { UniqueKeyManager } from './UniqueKeyManager';
import { BACKING_DATA_TOSCA_KEY } from '../entities/backingData';
import { flatMetaData } from '../common/entityDataTypes';
import { DATA_AGGREGATE_TOSCA_KEY } from '../entities/dataAggregate';
import { INFRASTRUCTURE_TOSCA_KEY } from '../entities/infrastructure';
import { EntityProperty } from '../common/entityProperty';
import { TOSCA_Property_Assignment } from '@/totypa/tosca-types/core-types';
import { TwoWayKeyIdMap } from './TwoWayKeyIdMap';
import { SERVICE_TOSCA_KEY } from '../entities/service';
import { BACKING_SERVICE_TOSCA_KEY } from '../entities/backingService';
import { STORAGE_BACKING_SERVICE_TOSCA_KEY } from '../entities/storageBackingService';
import { COMPONENT_TOSCA_KEY } from '../entities/component';
import { ENDPOINT_TOSCA_KEY } from '../entities/endpoint';
import { EXTERNAL_ENDPOINT_TOSCA_KEY } from '../entities/externalEndpoint';
import { DEPLOYMENT_MAPPING_TOSCA_KEY } from '../entities/deploymentMapping';
import { LINK_TOSCA_KEY } from '../entities/link';
import { REQUEST_TRACE_TOSCA_KEY } from '../entities/requestTrace';
import { prop } from 'vue-class-component';

const TOSCA_DEFINITIONS_VERSION = "tosca_simple_yaml_1_3"

const MATCH_WHITESPACES = new RegExp(/\s/g);
const MATCH_UNWANTED_CHARACTERS = new RegExp(/[#>\-\.]/g);
const MATCH_MULTIPLE_UNDERSCORES = new RegExp(/_+/g);

export function convertToServiceTemplate(systemEntity: Entities.System): TOSCA_Service_Template {

    const uniqueKeyManager = new UniqueKeyManager();
    const keyIdMap = new TwoWayKeyIdMap();

    let serviceTemplate: TOSCA_Service_Template = {
        tosca_definitions_version: TOSCA_DEFINITIONS_VERSION,
        metadata: {
            template_author: "CNA modeling tool",
            template_name: systemEntity.getSystemName,
            template_version: "0.1.0" // TODO customize
        },
        description: "Service template generated by the CNA modeling tool"
    }

    let topologyTemplate: TOSCA_Topology_Template = {
        description: "Topology template generated by the CNA modeling tool",
        node_templates: {},
        relationship_templates: {}
    };

    for (const [id, dataAggregate] of systemEntity.getDataAggregateEntities.entries()) {
        const nodeKey: string = uniqueKeyManager.ensureUniqueness(transformToYamlKey(dataAggregate.getName));
        let node = createDataAggregateTemplate(dataAggregate);
        keyIdMap.add(nodeKey, id);
        topologyTemplate.node_templates[nodeKey] = node;
    }

    for (const [id, backingData] of systemEntity.getBackingDataEntities.entries()) {
        const nodeKey: string = uniqueKeyManager.ensureUniqueness(transformToYamlKey(backingData.getName));
        let node = createBackingDataTemplate(backingData);
        keyIdMap.add(nodeKey, id);
        topologyTemplate.node_templates[nodeKey] = node;
    }

    for (const [id, infrastructure] of systemEntity.getInfrastructureEntities.entries()) {
        const nodeKey: string = uniqueKeyManager.ensureUniqueness(transformToYamlKey(infrastructure.getName));
        let node = createInfrastructureTemplate(infrastructure);
        if (infrastructure.getBackingDataEntities.length > 0) {
            node.requirements = [];
            for (const usedBackingData of infrastructure.getBackingDataEntities) {
                node.requirements.push({ "uses_backing_data": keyIdMap.getKey(usedBackingData.getId) });
            }
        }
        keyIdMap.add(nodeKey, id);
        topologyTemplate.node_templates[nodeKey] = node;
    }


    for (const [id, component] of systemEntity.getComponentEntities.entries()) {
        const nodeKey: string = uniqueKeyManager.ensureUniqueness(transformToYamlKey(component.getName));
        let node = createComponentTemplate(component);

        if (component.getEndpointEntities.length > 0) {
            node.requirements = [];
            for (const endpoint of component.getEndpointEntities) {
                const endpointNodeKey = uniqueKeyManager.ensureUniqueness(transformToYamlKey(endpoint.getName))
                let endpointNode = createEndpointTemplate(endpoint);

                keyIdMap.add(endpointNodeKey, endpoint.getId);
                topologyTemplate.node_templates[endpointNodeKey] = endpointNode;
                node.requirements.push({
                    "provides_endpoint": {
                        capability: "tosca.capabilities.Endpoint",
                        node: endpointNodeKey,
                        relationship: {
                            type: "cna.qualityModel.relationships.Provides.Endpoint",
                        }
                    } as TOSCA_Requirement_Assignment
                });
            }
        }

        if (component.getExternalEndpointEntities.length > 0) {
            if (!node.requirements) {
                node.requirements = [];
            }
            for (const externalEndpoint of component.getExternalEndpointEntities) {
                const endpointNodeKey = uniqueKeyManager.ensureUniqueness(transformToYamlKey(externalEndpoint.getName))
                let endpointNode = createExternalEndpointTemplate(externalEndpoint);

                keyIdMap.add(endpointNodeKey, externalEndpoint.getId);
                topologyTemplate.node_templates[endpointNodeKey] = endpointNode;
                node.requirements.push({
                    "provides_external_endpoint": {
                        capability: "tosca.capabilities.Endpoint.Public",
                        node: endpointNodeKey,
                        relationship: {
                            type: "cna.qualityModel.relationships.Provides.Endpoint",
                        }
                    } as TOSCA_Requirement_Assignment
                });
            }
        }

        if (component.getDataAggregateEntities.length > 0) {
            if (!node.requirements) {
                node.requirements = [];
            }
            for (const usedDataAggregate of component.getDataAggregateEntities) {
                // TODO save data usage relation
                node.requirements.push({ "uses_data": keyIdMap.getKey(usedDataAggregate.data.getId) });
            }
        }

        if (component.getBackingDataEntities.length > 0) {
            if (!node.requirements) {
                node.requirements = [];
            }
            for (const usedBackingData of component.getBackingDataEntities) {
                node.requirements.push({ "uses_backing_data": keyIdMap.getKey(usedBackingData.getId) });
            }
        }

        keyIdMap.add(nodeKey, id);
        topologyTemplate.node_templates[nodeKey] = node;
    }

    for (const [id, deploymentMapping] of systemEntity.getDeploymentMappingEntities.entries()) {
        const hostNodeKey = keyIdMap.getKey(deploymentMapping.getUnderlyingInfrastructure.getId);
        const hostedNodeKey = keyIdMap.getKey(deploymentMapping.getDeployedEntity.getId);
        const deploymentRelationshipKey = uniqueKeyManager.ensureUniqueness(`${hostNodeKey}_hosts_${hostedNodeKey}`);

        let relationship: TOSCA_Relationship_Template = {
            type: DEPLOYMENT_MAPPING_TOSCA_KEY
        }

        keyIdMap.add(deploymentRelationshipKey, id);
        topologyTemplate.relationship_templates[deploymentRelationshipKey] = relationship;

        let hostedNodeTemplate = topologyTemplate.node_templates[hostedNodeKey];

        if (!hostedNodeTemplate.requirements) {
            hostedNodeTemplate.requirements = [];
        }

        hostedNodeTemplate.requirements.push({
            "host": {
                node: hostNodeKey,
                relationship: deploymentRelationshipKey
            }
        })
    }

    for (const [id, link] of systemEntity.getLinkEntities.entries()) {
        const targetNodeKey = keyIdMap.getKey(link.getTargetEndpoint.getId);
        const sourceNodeKey = keyIdMap.getKey(link.getSourceEntity.getId);
        const linkRelationshipKey = uniqueKeyManager.ensureUniqueness(`${sourceNodeKey}_linksTo_${targetNodeKey}`);

        let relationship: TOSCA_Relationship_Template = {
            type: LINK_TOSCA_KEY
        }

        keyIdMap.add(linkRelationshipKey, id);
        topologyTemplate.relationship_templates[linkRelationshipKey] = relationship;

        let sourceNodeTemplate = topologyTemplate.node_templates[sourceNodeKey];

        if (!sourceNodeTemplate.requirements) {
            sourceNodeTemplate.requirements = [];
        }

        sourceNodeTemplate.requirements.push({
            "endpoint_link": {
                node: targetNodeKey,
                relationship: linkRelationshipKey
            }
        })
    }

    for (const [id, requestTrace] of systemEntity.getRequestTraceEntities.entries()) {
        const nodeKey = uniqueKeyManager.ensureUniqueness(transformToYamlKey(requestTrace.getName));
        let node = createRequestTraceTemplate(requestTrace, systemEntity, keyIdMap);

        topologyTemplate.node_templates[nodeKey] = node;
    }

    serviceTemplate.topology_template = topologyTemplate;
    return serviceTemplate;
}

function transformToYamlKey(name: string) {

    // 1. no leading or trailing whitespaces 
    // 2. replace whitespaces with underscore
    // 3. replace # > - . with underscore
    // 4. ensure no subsequent underscores

    return name.trim()
        .replace(MATCH_WHITESPACES, "_")
        .replace(MATCH_UNWANTED_CHARACTERS, "_")
        .replace(MATCH_MULTIPLE_UNDERSCORES, "_")
        .toLocaleLowerCase();
}

function parsePropertiesForYaml(properties: EntityProperty[]): { [propertyKey: string]: TOSCA_Property_Assignment | string } {
    let yamlProperties: { [propertyKey: string]: TOSCA_Property_Assignment | string } = {};
    for (const property of properties) {
        yamlProperties[property.getKey] = property.value
    }
    return yamlProperties;
}


function createDataAggregateTemplate(dataAggregate: Entities.DataAggregate): TOSCA_Node_Template {
    return {
        type: DATA_AGGREGATE_TOSCA_KEY,
        metadata: flatMetaData(dataAggregate.getMetaData),
    }
}


function createBackingDataTemplate(backingData: Entities.BackingData): TOSCA_Node_Template {

    let template: TOSCA_Node_Template = {
        type: BACKING_DATA_TOSCA_KEY,
        metadata: flatMetaData(backingData.getMetaData),
    }

    if (backingData.getIncludedData.length > 0) {
        let includedData = {};
        for (const data of backingData.getIncludedData) {
            includedData[data.key] = data.value;
        }
        template.properties = {
            "includedData": includedData
        }
    }

    return template;
}

function createInfrastructureTemplate(infrastructure: Entities.Infrastructure): TOSCA_Node_Template {

    let template: TOSCA_Node_Template = {
        type: INFRASTRUCTURE_TOSCA_KEY,
        metadata: flatMetaData(infrastructure.getMetaData),
    }

    if (infrastructure.getProperties().length > 0) {
        template.properties = parsePropertiesForYaml(infrastructure.getProperties());
    }

    return template;
}

function createComponentTemplate(component: Entities.Component): TOSCA_Node_Template {

    let typeKey = (() => {
        switch (component.constructor) {
            case Entities.Service:
                return SERVICE_TOSCA_KEY;
            case Entities.BackingService:
                return BACKING_SERVICE_TOSCA_KEY;
            case Entities.StorageBackingService:
                return STORAGE_BACKING_SERVICE_TOSCA_KEY;
            case Entities.Component:
            default:
                return COMPONENT_TOSCA_KEY;
        }
    })();

    let template: TOSCA_Node_Template = {
        type: typeKey,
        metadata: flatMetaData(component.getMetaData),
    }

    let properties = parsePropertiesForYaml(component.getProperties());
    if (isNonEmpty(properties)) {
        template.properties = properties;
    }

    return template;
}


function createEndpointTemplate(endpoint: Entities.Endpoint): TOSCA_Node_Template {
    let template: TOSCA_Node_Template = {
        type: ENDPOINT_TOSCA_KEY,
        metadata: flatMetaData(endpoint.getMetaData),
    };

    template.capabilities = {
        "endpoint": {
            properties: parsePropertiesForYaml(endpoint.getProperties())
        }
    }
    return template;
}

function createExternalEndpointTemplate(endpoint: Entities.ExternalEndpoint): TOSCA_Node_Template {
    let template: TOSCA_Node_Template = {
        type: EXTERNAL_ENDPOINT_TOSCA_KEY,
        metadata: flatMetaData(endpoint.getMetaData),
    };

    template.capabilities = {
        "external_endpoint": {
            properties: parsePropertiesForYaml(endpoint.getProperties())
        }
    }
    return template;
}

function createRequestTraceTemplate(requestTrace: Entities.RequestTrace, systemEntity: Entities.System, keyIdMap: TwoWayKeyIdMap) {

    let template: TOSCA_Node_Template = {
        type: REQUEST_TRACE_TOSCA_KEY,
        metadata: flatMetaData(requestTrace.getMetaData),
        properties: {
            nodes: [],
            links: []
        }
    }

    let nodeKeys = new Set<string>();
    for (const link of requestTrace.getLinks) {
        template.properties.links.push(keyIdMap.getKey(link.getId));
        nodeKeys.add(keyIdMap.getKey(link.getSourceEntity.getId));
        let targetComponent = systemEntity.searchComponentOfEndpoint(link.getTargetEndpoint.getId);
        if (targetComponent) {
            nodeKeys.add(keyIdMap.getKey(targetComponent.getId));
        }
    }
    template.properties.nodes.push(...nodeKeys);

    template.properties.external_endpoint = keyIdMap.getKey(requestTrace.getExternalEndpoint.getId)

    return template;
}


function isNonEmpty(obj) {
    for (const prop in obj) {
        if (Object.hasOwn(obj, prop) && obj[prop]) {
            return true;
        }
    }
    return false;
}